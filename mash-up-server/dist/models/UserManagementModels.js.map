{"version":3,"sources":["../../src/models/UserManagementModels.js"],"names":["validator","require","bcrypt","randomstring","ejwt","jwt","userSchema","Schema","_id","type","String","required","email","unique","trim","validate","isEmail","message","password","minLength","role","tokens","access","token","methods","generateAuthToken","user","isNew","generate","length","charset","sign","toString","push","save","then","statics","findUserByEmail","User","findOne","comparePassword","clientPassword","hashedPassword","compare","model","module","exports"],"mappings":";;AAAA;;;;AACA;;AAMA;;;;AALA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,SAASD,QAAQ,UAAR,CAAf;AACA,IAAME,eAAeF,QAAQ,cAAR,CAArB;AACA,IAAMG,OAAOH,QAAQ,aAAR,CAAb;AACA,IAAMI,MAAMJ,QAAQ,cAAR,CAAZ;;;AAGA,IAAIK,aAAa,IAAI,mBAASC,MAAb,CAAoB;AACjCC,SAAI;AACAC,cAAKC,MADL;AAEAC,kBAAS;AAFT,KAD6B;AAKjCC,WAAM;AACFH,cAAKC,MADH;AAEFG,gBAAO,IAFL;AAGFF,kBAAS,IAHP;AAIFG,cAAK,IAJH;AAKFC,kBAAU;AACNf,uBAAUA,UAAUgB,OADd;AAENC,qBAAQ;AAFF;AALR,KAL2B;AAejCC,cAAS;AACLT,cAAKC,MADA;AAELC,kBAAS,IAFJ;AAGLG,cAAK,IAHA;AAILK,mBAAU;AAJL,KAfwB;AAqBjCC,UAAK;AACDX,cAAKC,MADJ;AAEDC,kBAAS;AAFR,KArB4B;AAyBjCU,YAAO,CAAC;AACJC,gBAAO;AACHb,kBAAKC,MADF;AAEHC,sBAAS;AAFN,SADH;AAKJY,eAAM;AACFd,kBAAKC,MADH;AAEFC,sBAAS;AAFP;AALF,KAAD;AAzB0B,CAApB,CAAjB;AAoCAL,WAAWkB,OAAX,CAAmBC,iBAAnB,GAAuC,YAAU;AAC7C,QAAIC,OAAO,IAAX;AACAA,SAAKC,KAAL,GAAa,KAAb;AACA,QAAIL,SAASnB,aAAayB,QAAb,CAAsB;AAC/BC,gBAAQ,EADuB;AAE/BC,iBAAS;AAFsB,KAAtB,CAAb;AAIA,QAAIP,QAAQlB,IAAI0B,IAAJ,CAAS,EAAC,QAAOL,KAAKd,KAAb,EAAmB,QAAOc,KAAKN,IAA/B,EAAqCE,cAArC,EAAT,uBAAiEU,QAAjE,EAAZ;AACAN,SAAKL,MAAL,CAAYY,IAAZ,CAAiB,EAACX,cAAD,EAAQC,YAAR,EAAjB;AACA,WAAOG,KAAKQ,IAAL,GAAYC,IAAZ,CAAiB,YAAI;AACxB,eAAOZ,KAAP;AACH,KAFM,CAAP;AAGH,CAZD;AAaAjB,WAAW8B,OAAX,CAAmBC,eAAnB,GAAqC,UAASzB,KAAT,EAAe;AAChD,QAAI0B,OAAO,IAAX;AACA,WAAOA,KAAKC,OAAL,CAAa,EAAC,SAAQ3B,KAAT,EAAb,CAAP;AACH,CAHD;AAIAN,WAAW8B,OAAX,CAAmBI,eAAnB,GAAqC,UAASC,cAAT,EAAyBC,cAAzB,EAAwC;AACzE,WAAOxC,OAAOyC,OAAP,CAAeF,cAAf,EAA+BC,cAA/B,CAAP;AACH,CAFD;AAGA,IAAIJ,OAAO,mBAASM,KAAT,CAAe,MAAf,EAAuBtC,UAAvB,EAAkC,WAAlC,CAAX;;AAIAuC,OAAOC,OAAP,GAAiB,EAACR,UAAD,EAAjB","file":"UserManagementModels.js","sourcesContent":["import mongoose from 'mongoose';\nimport {mongooseConnection} from '../globals/MongoDbConfig';\nconst validator = require('validator');\nconst bcrypt = require('bcryptjs');\nconst randomstring = require(\"randomstring\");\nconst ejwt = require('express-jwt');\nconst jwt = require('jsonwebtoken');\nimport {JWTSecret} from '../globals/DbConfig';\n\nvar userSchema = new mongoose.Schema({\n    _id:{\n        type:String,\n        required:true\n    },\n    email:{\n        type:String,\n        unique:true,\n        required:true,\n        trim:true,\n        validate: {\n            validator:validator.isEmail,\n            message:\"Not a valid email\"\n        }\n    },\n    password:{\n        type:String,\n        required:true,\n        trim:true,\n        minLength:6\n    },\n    role:{\n        type:String,\n        required:false\n    },\n    tokens:[{\n        access:{\n            type:String,\n            required:true\n        },\n        token:{\n            type:String,\n            required:true\n        }\n    }]\n});\nuserSchema.methods.generateAuthToken = function(){\n    var user = this;\n    user.isNew = false;\n    var access = randomstring.generate({\n        length: 12,\n        charset: 'alphanumeric'\n    });\n    var token = jwt.sign({\"user\":user.email,\"role\":user.role, access},JWTSecret).toString();\n    user.tokens.push({access,token});\n    return user.save().then(()=>{\n        return token;\n    });\n}\nuserSchema.statics.findUserByEmail = function(email){\n    var User = this;\n    return User.findOne({\"email\":email})\n}\nuserSchema.statics.comparePassword = function(clientPassword, hashedPassword){\n    return bcrypt.compare(clientPassword, hashedPassword);\n}\nvar User = mongoose.model('User', userSchema,'userLogin');\n\n\n\nmodule.exports = {User};\n"]}