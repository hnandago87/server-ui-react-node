{"version":3,"sources":["../../src/models/UserManagementModels.js"],"names":["validator","require","bcrypt","randomstring","jwt","userSchema","Schema","_id","type","String","required","email","unique","trim","validate","isEmail","message","password","minLength","role","tokens","access","token","methods","generateAuthToken","user","isNew","generate","length","charset","sign","toString","push","save","then","removeToken","filter","el","result","statics","findUserByEmail","User","findOne","comparePassword","clientPassword","hashedPassword","compare","findUserByToken","model","module","exports"],"mappings":";;AAAA;;;;AACA;;AAKA;;;;AAJA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;AACA,IAAMC,SAASD,QAAQ,UAAR,CAAf;AACA,IAAME,eAAeF,QAAQ,cAAR,CAArB;AACA,IAAMG,MAAMH,QAAQ,cAAR,CAAZ;;;AAGA,IAAII,aAAa,IAAI,mBAASC,MAAb,CAAoB;AACjCC,SAAI;AACAC,cAAKC,MADL;AAEAC,kBAAS;AAFT,KAD6B;AAKjCC,WAAM;AACFH,cAAKC,MADH;AAEFG,gBAAO,IAFL;AAGFF,kBAAS,IAHP;AAIFG,cAAK,IAJH;AAKFC,kBAAU;AACNd,uBAAUA,UAAUe,OADd;AAENC,qBAAQ;AAFF;AALR,KAL2B;AAejCC,cAAS;AACLT,cAAKC,MADA;AAELC,kBAAS,IAFJ;AAGLG,cAAK,IAHA;AAILK,mBAAU;AAJL,KAfwB;AAqBjCC,UAAK;AACDX,cAAKC,MADJ;AAEDC,kBAAS;AAFR,KArB4B;AAyBjCU,YAAO,CAAC;AACJC,gBAAO;AACHb,kBAAKC,MADF;AAEHC,sBAAS;AAFN,SADH;AAKJY,eAAM;AACFd,kBAAKC,MADH;AAEFC,sBAAS;AAFP;AALF,KAAD;AAzB0B,CAApB,CAAjB;AAoCAL,WAAWkB,OAAX,CAAmBC,iBAAnB,GAAuC,YAAU;AAC7C,QAAIC,OAAO,IAAX;AACAA,SAAKC,KAAL,GAAa,KAAb;AACA,QAAIL,SAASlB,aAAawB,QAAb,CAAsB;AAC/BC,gBAAQ,EADuB;AAE/BC,iBAAS;AAFsB,KAAtB,CAAb;AAIA,QAAIP,QAAQlB,IAAI0B,IAAJ,CAAS,EAAC,QAAOL,KAAKd,KAAb,EAAmB,QAAOc,KAAKN,IAA/B,EAAqCE,cAArC,EAAT,uBAAiEU,QAAjE,EAAZ;AACAN,SAAKL,MAAL,CAAYY,IAAZ,CAAiB,EAACX,cAAD,EAAQC,YAAR,EAAjB;AACA,WAAOG,KAAKQ,IAAL,GAAYC,IAAZ,CAAiB,YAAI;AACxB,eAAOZ,KAAP;AACH,KAFM,CAAP;AAGH,CAZD;AAaAjB,WAAWkB,OAAX,CAAmBY,WAAnB,GAAiC,UAASb,KAAT,EAAe;AAC5C,QAAIG,OAAQ,IAAZ;AACAA,SAAKL,MAAL,GAAcK,KAAKL,MAAL,CAAYgB,MAAZ,CAAmB,UAACC,EAAD,EAAM;AACnC,eAAOA,GAAGf,KAAH,IAAYA,KAAnB;AACH,KAFa,CAAd;AAGA,WAAOG,KAAKQ,IAAL,GAAYC,IAAZ,CAAiB,UAACI,MAAD,EAAU;AAC9B,eAAOA,MAAP;AACH,KAFM,CAAP;AAGH,CARD;AASAjC,WAAWkC,OAAX,CAAmBC,eAAnB,GAAqC,UAAS7B,KAAT,EAAe;AAChD,QAAI8B,OAAO,IAAX;AACA,WAAOA,KAAKC,OAAL,CAAa,EAAC,SAAQ/B,KAAT,EAAb,CAAP;AACH,CAHD;AAIAN,WAAWkC,OAAX,CAAmBI,eAAnB,GAAqC,UAASC,cAAT,EAAyBC,cAAzB,EAAwC;AACzE,WAAO3C,OAAO4C,OAAP,CAAeF,cAAf,EAA+BC,cAA/B,CAAP;AACH,CAFD;;AAIAxC,WAAWkC,OAAX,CAAmBQ,eAAnB,GAAqC,UAASzB,KAAT,EAAe;AAChD,QAAImB,OAAO,IAAX;AACA,WAAOA,KAAKC,OAAL,CAAa,EAAC,gBAAepB,KAAhB,EAAb,CAAP;AACH,CAHD;AAIA,IAAImB,OAAO,mBAASO,KAAT,CAAe,MAAf,EAAuB3C,UAAvB,EAAkC,WAAlC,CAAX;;AAIA4C,OAAOC,OAAP,GAAiB,EAACT,UAAD,EAAjB","file":"UserManagementModels.js","sourcesContent":["import mongoose from 'mongoose';\nimport {mongooseConnection} from '../globals/MongoDbConfig';\nconst validator = require('validator');\nconst bcrypt = require('bcryptjs');\nconst randomstring = require(\"randomstring\");\nconst jwt = require('jsonwebtoken');\nimport {JWTSecret} from '../globals/DbConfig';\n\nvar userSchema = new mongoose.Schema({\n    _id:{\n        type:String,\n        required:true\n    },\n    email:{\n        type:String,\n        unique:true,\n        required:true,\n        trim:true,\n        validate: {\n            validator:validator.isEmail,\n            message:\"Not a valid email\"\n        }\n    },\n    password:{\n        type:String,\n        required:true,\n        trim:true,\n        minLength:6\n    },\n    role:{\n        type:String,\n        required:false\n    },\n    tokens:[{\n        access:{\n            type:String,\n            required:true\n        },\n        token:{\n            type:String,\n            required:true\n        }\n    }]\n});\nuserSchema.methods.generateAuthToken = function(){\n    var user = this;\n    user.isNew = false;\n    var access = randomstring.generate({\n        length: 12,\n        charset: 'alphanumeric'\n    });\n    var token = jwt.sign({\"user\":user.email,\"role\":user.role, access},JWTSecret).toString();\n    user.tokens.push({access,token});\n    return user.save().then(()=>{\n        return token;\n    });\n}\nuserSchema.methods.removeToken = function(token){\n    var user =  this;\n    user.tokens = user.tokens.filter((el)=>{\n        return el.token != token\n    });\n    return user.save().then((result)=>{\n        return result;\n    })\n}\nuserSchema.statics.findUserByEmail = function(email){\n    var User = this;\n    return User.findOne({\"email\":email})\n}\nuserSchema.statics.comparePassword = function(clientPassword, hashedPassword){\n    return bcrypt.compare(clientPassword, hashedPassword);\n}\n\nuserSchema.statics.findUserByToken = function(token){\n    var User = this;\n    return User.findOne({\"tokens.token\":token});\n}\nvar User = mongoose.model('User', userSchema,'userLogin');\n\n\n\nmodule.exports = {User};\n"]}