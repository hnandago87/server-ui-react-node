{"version":3,"sources":["../../src/models/OrganizationModal.js"],"names":["mongoose","require","mongooseConnection","validator","randomstring","Schema","OrganizationSchema","OrganizationName","type","String","required","unique","OrganizationCode","default","generate","length","charset","OrganizationProjects","Types","ref","field","admins","users","statics","getProjects","organizaionCode","findOne","then","data","methods","saveOrganization","organization","save","Organization","model","module","exports"],"mappings":"AAAA;;AAEA;;AADA,IAAIA,WAAWC,QAAQ,UAAR,CAAf;;AAEA,IAAIC,qBAAqBD,QAAQ,0BAAR,CAAzB;AACA,IAAME,YAAYF,QAAQ,WAAR,CAAlB;AACA,IAAMG,eAAeH,QAAQ,cAAR,CAArB;AACA,IAAII,SAASL,SAASK,MAAtB;;AAEA,IAAMC,qBAAqB,IAAIN,SAASK,MAAb,CAAoB;AAC3CE,sBAAiB;AACbC,cAAKC,MADQ;AAEbC,kBAAS,IAFI;AAGbC,gBAAO;AAHM,KAD0B;AAM3CC,sBAAiB;AACbF,kBAAS,IADI;AAEbF,cAAKC,MAFQ;AAGbI,iBAAQT,aAAaU,QAAb,CAAsB;AAC1BC,oBAAQ,EADkB;AAE1BC,qBAAS;AAFiB,SAAtB,CAHK;AAObL,gBAAO;AAPM,KAN0B;AAe3CM,0BAAqB,CAAC,EAACT,MAAMR,SAASK,MAAT,CAAgBa,KAAhB,CAAsBT,MAA7B,EAAqCU,KAAK,SAA1C,EAAqDC,OAAM,WAA3D,EAAD,CAfsB;AAgB3CC,YAAO,CAAC,EAACb,MAAMR,SAASK,MAAT,CAAgBa,KAAhB,CAAsBT,MAA7B,EAAqCU,KAAK,QAA1C,EAAoDC,OAAM,UAA1D,EAAD,CAhBoC;AAiB3CE,WAAM,CAAC,EAACd,MAAMR,SAASK,MAAT,CAAgBa,KAAhB,CAAsBT,MAA7B,EAAqCU,KAAK,QAA1C,EAAoDC,OAAM,UAA1D,EAAD;AAjBqC,CAApB,CAA3B;;AAoBAd,mBAAmBiB,OAAnB,CAA2BC,WAA3B,GAAyC,UAASC,eAAT,EAAyB;AAC9D,WAAO,KAAKC,OAAL,CAAa,EAAC,oBAAmBD,eAApB,EAAb,EAAmDE,IAAnD,CAAwD,UAASC,IAAT,EAAc;AAAC,eAAOA,IAAP;AAAY,KAAnF,CAAP;AACH,CAFD;;AAIAtB,mBAAmBuB,OAAnB,CAA2BC,gBAA3B,GAA8C,YAAU;AACpD,QAAIC,eAAe,IAAnB;AACA,WAAOA,aAAaC,IAAb,GAAoBL,IAApB,CAAyB,UAASC,IAAT,EAAc;AAC1C,eAAOA,IAAP;AACH,KAFM,CAAP;AAGH,CALD;;AAOA,IAAMK,eAAejC,SAASkC,KAAT,CAAe,cAAf,EAA+B5B,kBAA/B,EAAkD,qBAAlD,CAArB;AACA6B,OAAOC,OAAP,GAAiB,EAACH,0BAAD,EAAe3B,sCAAf,EAAjB","file":"OrganizationModal.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nimport {map, where, find, contains, has, some} from 'underscore'\nvar mongooseConnection = require('../globals/MongoDbConfig');\nconst validator = require('validator');\nconst randomstring = require(\"randomstring\");\nvar Schema = mongoose.Schema;\n\nconst OrganizationSchema = new mongoose.Schema({\n    OrganizationName:{\n        type:String,\n        required:true,\n        unique:true\n    },\n    OrganizationCode:{\n        required:true,\n        type:String,\n        default:randomstring.generate({\n            length: 12,\n            charset: 'alphanumeric'\n        }),\n        unique:true\n    },\n    OrganizationProjects:[{type: mongoose.Schema.Types.String, ref: 'Project', field:'projectId'}],\n    admins:[{type: mongoose.Schema.Types.String, ref: 'Member', field:'memberId'}],\n    users:[{type: mongoose.Schema.Types.String, ref: 'Member', field:'memberId'}],\n});\n\nOrganizationSchema.statics.getProjects = function(organizaionCode){\n    return this.findOne({\"OrganizationCode\":organizaionCode}).then(function(data){return data});\n}\n\nOrganizationSchema.methods.saveOrganization = function(){\n    var organization = this;\n    return organization.save().then(function(data){\n        return data\n    });\n}\n\nconst Organization = mongoose.model('Organization', OrganizationSchema,'projectOrganization');\nmodule.exports = {Organization, OrganizationSchema};"]}