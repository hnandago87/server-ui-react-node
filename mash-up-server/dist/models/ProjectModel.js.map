{"version":3,"sources":["../../src/models/ProjectModel.js"],"names":["mongoose","require","mongooseConnection","validator","randomstring","projectSchema","Schema","projectName","type","String","required","projectId","unique","default","generate","length","charset","cost","memberCount","Number","members","Types","Mixed","ref","field","active","Boolean","startDate","Date","endDate","OrganizationCode","statics","getMembers","getProject","findOne","then","data","getData","fromMap","next","console","log","model","find","$in","err","result","pre","self","post","fetchedData","res","Project","module","exports"],"mappings":"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","file":"ProjectModel.js","sourcesContent":["'use strict';\nvar mongoose = require('mongoose');\nvar mongooseConnection = require('../globals/MongoDbConfig');\nconst validator = require('validator');\nconst randomstring = require(\"randomstring\");\nimport {parallel, map} from 'async';\nconst projectSchema = new mongoose.Schema({\n    projectName:{\n        type:String,\n        required:true\n    },\n    projectId:{\n        type:String,\n        unique:true,\n        default:function(){\n            return randomstring.generate({\n                length: 12,\n                charset: 'alphanumeric'\n            });\n        }\n    },\n    cost:{\n        type:String,\n        required:false\n    },\n    memberCount:{\n        type:Number,\n        required:true\n    },\n    members:[\n        {type: mongoose.Schema.Types.Mixed, ref: 'Member', field:'memberId'}\n    ],\n    active:{\n        type:Boolean,\n        default:false\n    },\n    startDate:{\n        type:Date,\n        required:false\n    },\n    endDate:{\n        type:Date,\n        required:false\n    },\n    OrganizationCode:{\n        type:mongoose.Schema.Types.String, ref:'Organization', field:'OrganizationCode'\n    }\n});\n\nprojectSchema.statics.getMembers = function(){}\n\nprojectSchema.statics.getProject = function(projectId, OrganizationCode){\n    return this.findOne({\"projectId\":projectId,\"OrganizationCode\":OrganizationCode}).then((data)=>{return data})\n}\n\nfunction getData(fromMap,next){\n    console.log(\"calling member\")\n    mongoose.model('Member').find({\"memberId\":{$in:fromMap}},(err,result)=>{\n        if(err){\n            console.log(\"member findOne error\")\n            console.log(err)\n            next(err,null);\n        }else{\n            console.log(\"found member data\")\n            console.log(result)\n            next(null,result);\n        }\n    });\n    // mongoose.model('Member').findOne({\"memberId\":fromMap}, (err, result)=>{\n    //     if(!err){\n    //         console.log(\"found member data\")\n    //         console.log(result)\n    //         next(null,result);\n    //     }else{\n    //         console.log(\"member findOne error\")\n    //         console.log(err)\n    //         next(err,null);\n    //     }\n    // });\n}\nprojectSchema.pre('save', function(next){\n    let self = this;\n});\n\nprojectSchema.post('findOne', function(fetchedData, res){\n    console.log(\"calling post fetch\")\n    let self = this;\n    getData(fetchedData.members,(err,result)=>{\n        console.log(\"post fetch\");\n        if(err){\n        }else{\n            fetchedData[\"members\"] = result;\n        }\n       res();\n    })\n    // map(fetchedData.members,getData, function(err, result){\n    //     console.log(\"post fetch\");\n    //     if(err){\n    //     }else{\n    //         next[\"members\"] = result;\n    //     }\n    //    res();\n    // });\n})\n\nvar Project = mongoose.model('Project', projectSchema,'projects');\nmodule.exports = {Project,projectSchema}"]}