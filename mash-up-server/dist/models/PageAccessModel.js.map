{"version":3,"sources":["../../src/models/PageAccessModel.js"],"names":["validator","require","pageAccessSchema","Schema","_id","type","String","required","unique","trim","validate","isEmail","message","pageAccess","pageName","access","defaultView","switchable","Boolean","default","switchablePages","methods","removeAccess","user","updtedAccess","map","page","updatedAccess","save","then","result","addAccess","numberOfPages","length","push","statics","findUserByEmail","email","findOne","findPageAccessForUser","console","log","PageAccess","model","module","exports"],"mappings":";;AAAA;;;;AACA;;AACA;;;;AACA,IAAMA,YAAYC,QAAQ,WAAR,CAAlB;;AAEA,IAAIC,mBAAmB,IAAI,mBAASC,MAAb,CAAoB;AACvCC,SAAI;AACAC,cAAKC,MADL;AAEAC,kBAAS,IAFT;AAGAC,gBAAO,IAHP;AAIAC,cAAK,IAJL;AAKAC,kBAAU;AACNV,uBAAUA,UAAUW,OADd;AAENC,qBAAQ;AAFF;AALV,KADmC;AAWvCC,gBAAW,CAAC;AACRC,kBAAS;AACLT,kBAAKC,MADA;AAELC,sBAAS;AAFJ,SADD;AAKRQ,gBAAO;AACHC,yBAAY;AACRX,sBAAKC,MADG;AAERC,0BAAS;AAFD,aADT;AAKHU,wBAAW;AACPZ,sBAAKa,OADE;AAEPC,yBAAQ;AAFD,aALR;AASHC,6BAAgB;AACZf,sBAAK,CAACC,MAAD,CADO;AAEZC,0BAAS;AAFG;AATb;;AALC,KAAD;AAX4B,CAApB,CAAvB;AAiCAL,iBAAiBmB,OAAjB,CAAyBC,YAAzB,GAAwC,UAAST,UAAT,EAAoB;AACxD,QAAIU,OAAO,IAAX;AACA,QAAIC,eAAeD,KAAKV,UAAL,CAAgBY,GAAhB,CAAoB,UAASC,IAAT,EAAc;AACjD,YAAGA,KAAKZ,QAAL,IAAiBD,WAAWC,QAA/B,EAAwC;AACpCY,iBAAKX,MAAL,GAAcF,WAAWE,MAAzB;AACH;AACJ,KAJkB,CAAnB;AAKAQ,SAAKV,UAAL,GAAkBc,aAAlB;AACA,WAAOJ,KAAKK,IAAL,GAAYC,IAAZ,CAAiB,UAACC,MAAD,EAAU;AAC9B,eAAOA,MAAP;AACH,KAFM,CAAP;AAGH,CAXD;AAYA5B,iBAAiBmB,OAAjB,CAAyBU,SAAzB,GAAqC,UAASlB,UAAT,EAAoB;AACrD,QAAIU,OAAO,IAAX;AACA,QAAIS,gBAAgBT,KAAKV,UAAL,CAAgBoB,MAApC;AACA,QAAG,uBAAMV,KAAKV,UAAX,EAAsBA,UAAtB,EAAkCoB,MAAlC,IAA4C,CAA/C,EAAiD;AAC7CV,aAAKV,UAAL,CAAgBqB,IAAhB,CAAqBrB,UAArB;AACH;AACD,QAAGmB,gBAAeT,KAAKV,UAAL,CAAgBoB,MAAlC,EAAyC;AACrC,eAAOV,KAAKK,IAAL,GAAYC,IAAZ,CAAiB,UAACC,MAAD,EAAU;AAC9B,mBAAOA,MAAP;AACH,SAFM,CAAP;AAGH,KAJD,MAIO;AACH,eAAO,CAAP;AACH;AACJ,CAbD;AAcA5B,iBAAiBiC,OAAjB,CAAyBC,eAAzB,GAA2C,UAASC,KAAT,EAAe;AACtD,QAAId,OAAO,IAAX;AACA,WAAOA,KAAKe,OAAL,CAAa,EAAC,OAAMD,KAAP,EAAb,CAAP;AACH,CAHD;AAIAnC,iBAAiBiC,OAAjB,CAAyBI,qBAAzB,GAAiD,UAASF,KAAT,EAAgBvB,QAAhB,EAAyB;AACtE,QAAIS,OAAO,IAAX;AACA,WAAOA,KAAKe,OAAL,CAAa,EAAC,OAAMD,KAAP,EAAb,EAA4BR,IAA5B,CAAiC,UAACC,MAAD,EAAU;AAC9CU,gBAAQC,GAAR,CAAYX,MAAZ;AACA,YAAGA,MAAH,EAAU;AACP,mBAAO,sBAAKA,OAAOjB,UAAZ,EAAuB,UAACE,MAAD,EAAU;AACnC,uBAAOA,OAAOD,QAAP,IAAmBA,QAA1B;AACH,aAFK,CAAP;AAGF;AACJ,KAPM,CAAP;AAQH,CAVD;;AAYA,IAAI4B,aAAa,mBAASC,KAAT,CAAe,YAAf,EAA6BzC,gBAA7B,EAA8C,YAA9C,CAAjB;AACA0C,OAAOC,OAAP,GAAiB,EAACH,sBAAD,EAAjB","file":"PageAccessModel.js","sourcesContent":["import mongoose from 'mongoose';\nimport {mongooseConnection} from '../globals/MongoDbConfig';\nimport {map, where, find} from 'underscore'\nconst validator = require('validator');\n\nvar pageAccessSchema = new mongoose.Schema({\n    _id:{\n        type:String,\n        required:true,\n        unique:true,\n        trim:true,\n        validate: {\n            validator:validator.isEmail,\n            message:\"Not a valid email\"\n        }\n    },\n    pageAccess:[{\n        pageName:{\n            type:String,\n            required:true\n        },\n        access:{\n            defaultView:{\n                type:String,\n                required:true,\n            },\n            switchable:{\n                type:Boolean,\n                default:false\n            },\n            switchablePages:{\n                type:[String],\n                required:true\n            }\n        }\n\n    }]\n});\npageAccessSchema.methods.removeAccess = function(pageAccess){\n    let user = this;\n    let updtedAccess = user.pageAccess.map(function(page){\n        if(page.pageName == pageAccess.pageName){\n            page.access = pageAccess.access\n        }\n    });\n    user.pageAccess = updatedAccess;\n    return user.save().then((result)=>{\n        return result;\n    });\n}\npageAccessSchema.methods.addAccess = function(pageAccess){\n    let user = this;\n    let numberOfPages = user.pageAccess.length;\n    if(where(user.pageAccess,pageAccess).length == 0){\n        user.pageAccess.push(pageAccess);\n    }\n    if(numberOfPages< user.pageAccess.length){\n        return user.save().then((result)=>{\n            return result;\n        })\n    } else {\n        return 0;\n    }\n}\npageAccessSchema.statics.findUserByEmail = function(email){\n    var user = this;\n    return user.findOne({\"_id\":email})\n};\npageAccessSchema.statics.findPageAccessForUser = function(email, pageName){\n    var user = this;\n    return user.findOne({\"_id\":email}).then((result)=>{\n        console.log(result)\n        if(result){\n           return find(result.pageAccess,(access)=>{\n                return access.pageName == pageName;\n            });\n        }\n    });\n}\n\nvar PageAccess = mongoose.model('PageAccess', pageAccessSchema,'pageAccess');\nmodule.exports = {PageAccess};"]}