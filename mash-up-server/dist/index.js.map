{"version":3,"sources":["../src/index.js"],"names":["express","require","path","fs","favicon","logger","cookieParser","bodyParser","session","passport","LocalStrategy","Strategy","ejwt","jwt","multer","mongo","mongoose","db","connection","userManagement","app","use","static","join","__dirname","json","urlencoded","extended","secret","saveUninitialized","resave","initialize","req","res","next","setHeader","get","cookie","sendFile","port","process","env","PORT","listen"],"mappings":";;AAeA;;AAfA,IAAMA,UAAUC,QAAQ,SAAR,CAAhB;AACA,IAAMC,OAAOD,QAAQ,MAAR,CAAb;AACA,IAAME,KAAKF,QAAQ,IAAR,CAAX;AACA,IAAMG,UAAUH,QAAQ,eAAR,CAAhB;AACA,IAAMI,SAASJ,QAAQ,QAAR,CAAf;AACA,IAAMK,eAAeL,QAAQ,eAAR,CAArB;AACA,IAAMM,aAAaN,QAAQ,aAAR,CAAnB;AACA,IAAMO,UAAUP,QAAQ,iBAAR,CAAhB;AACA,IAAMQ,WAAWR,QAAQ,UAAR,CAAjB;AACA,IAAMS,gBAAgBT,QAAQ,gBAAR,EAA0BU,QAAhD;AACA,IAAMC,OAAOX,QAAQ,aAAR,CAAb;AACA,IAAMY,MAAMZ,QAAQ,cAAR,CAAZ;AACA,IAAMa,SAASb,QAAQ,QAAR,CAAf;AACA,IAAMc,QAAQd,QAAQ,SAAR,CAAd;AACA,IAAMe,WAAYf,QAAQ,UAAR,CAAlB;;;AAGA,IAAMgB,KAAKD,SAASE,UAApB;AACA,IAAMC,iBAAiBlB,QAAQ,8BAAR,CAAvB;;AAEA,IAAMmB,MAAMpB,SAAZ;AACA;AACAoB,IAAIC,GAAJ,CAAQrB,QAAQsB,MAAR,CAAepB,KAAKqB,IAAL,CAAUC,SAAV,EAAoB,wBAApB,CAAf,CAAR;AACAJ,IAAIC,GAAJ,CAAQhB,OAAO,KAAP,CAAR;AACAe,IAAIC,GAAJ,CAAQd,WAAWkB,IAAX,EAAR;AACAL,IAAIC,GAAJ,CAAQd,WAAWmB,UAAX,CAAsB,EAACC,UAAS,KAAV,EAAtB,CAAR;AACAP,IAAIC,GAAJ,CAAQf,cAAR;AACA;AACAc,IAAIC,GAAJ,CAAQb,QAAQ;AACZoB,+BADY;AAEZC,kDAFY;AAGZC;AAHY,CAAR,CAAR;AAKA;AACAV,IAAIC,GAAJ,CAAQZ,SAASsB,UAAT,EAAR;AACA;;AAEA;;AAEAX,IAAIC,GAAJ,CAAQ,UAAUW,GAAV,EAAeC,GAAf,EAAoBC,IAApB,EAA0B;AAC9B;AACAD,QAAIE,SAAJ,CAAc,6BAAd,EAA6C,GAA7C;AACA;AACAF,QAAIE,SAAJ,CAAc,8BAAd,EAA8C,wCAA9C;AACA;AACAF,QAAIE,SAAJ,CAAc,8BAAd,EAA8C,GAA9C;AACA;AACA;AACAF,QAAIE,SAAJ,CAAc,kCAAd,EAAkD,IAAlD;AACA;AACAD;AACH,CAZD;;AAcAd,IAAIC,GAAJ,CAAQ,aAAR,EAAsBF,cAAtB;;AAEA;AACAC,IAAIgB,GAAJ,CAAQ,GAAR,EAAa,UAACJ,GAAD,EAAMC,GAAN,EAAWC,IAAX,EAAkB;AAACD,QAAII,MAAJ,CAAW,GAAX,EAAe,GAAf,EAAqBH;AAAO,CAA5D,EAA6D,UAACF,GAAD,EAAMC,GAAN,EAAc;AACzEA,QAAIK,QAAJ,CAAapC,KAAKqB,IAAL,CAAUC,YAAU,0BAApB,CAAb;AACD,CAFD;;AAKA,IAAMe,OAAOC,QAAQC,GAAR,CAAYC,IAAZ,IAAoB,IAAjC;AACAtB,IAAIuB,MAAJ,CAAWJ,IAAX;;AAMA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const express = require('express');\nconst path = require('path');\nconst fs = require('fs');\nconst favicon = require('serve-favicon');\nconst logger = require('morgan');\nconst cookieParser = require('cookie-parser');\nconst bodyParser = require('body-parser');\nconst session = require('express-session');\nconst passport = require('passport');\nconst LocalStrategy = require('passport-local').Strategy;\nconst ejwt = require('express-jwt');\nconst jwt = require('jsonwebtoken');\nconst multer = require('multer');\nconst mongo = require('mongodb');\nconst mongoose =  require('mongoose');\nimport {secretKey,saveUninitialized,resave} from './globals/DbConfig';\n\nconst db = mongoose.connection;\nconst userManagement = require('./routes/userManagementRoute')\n\nconst app = express();\n// Serve static files from the React app\napp.use(express.static(path.join(__dirname,'../../mash-up-ui/build')));\napp.use(logger('dev'));\napp.use(bodyParser.json());\napp.use(bodyParser.urlencoded({extended:false}));\napp.use(cookieParser());\n//Handle session\napp.use(session({\n    secret:secretKey,\n    saveUninitialized: saveUninitialized,\n    resave:resave\n}));\n//Handle authentication\napp.use(passport.initialize());\n// app.use(passport.session());\n\n//express validator\n\napp.use(function (req, res, next) {\n    // Website you wish to allow to connect\n    res.setHeader('Access-Control-Allow-Origin', '*');\n    // Request methods you wish to allow\n    res.setHeader('Access-Control-Allow-Methods', 'GET, POST, OPTIONS, PUT, PATCH, DELETE');\n    // Request headers you wish to allow\n    res.setHeader('Access-Control-Allow-Headers', \"*\");\n    // Set to true if you need the website to include cookies in the requests sent\n    // to the API (e.g. in case you use sessions)\n    res.setHeader('Access-Control-Allow-Credentials', true);\n    // Pass to next layer of middleware\n    next();\n});\n\napp.use('/usersLogin',userManagement);\n\n//Any route that does not match the given route, it serves front end.\napp.get('*', (req, res, next)=>{res.cookie(\"h\",\"h\"); next()},(req, res) => {\n  res.sendFile(path.join(__dirname+'/client/build/index.html'));\n});\n\n\nconst port = process.env.PORT || 5000;\napp.listen(port);\n\n\n\n\n\n//TODO\n// 1. User Model work on generating auth token with JWT\n// 2. Send to middleware\n// 3. send to response as cookie "]}